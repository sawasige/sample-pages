name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'docs/**'

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  build-and-deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'
    environment:
      name: github-pages-preview
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: docs

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll for PR
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}/pr-${{ github.event.number }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site
          name: github-pages-pr-${{ github.event.number }}

      - name: Deploy PR Preview
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-pr-${{ github.event.number }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('プレビューサイト')
            );
            
            const body = `## 📖 プレビューサイト

            このプルリクエストの変更内容は以下のURLでプレビューできます：

            🔗 **プレビューURL**: ${{ steps.deployment.outputs.page_url }}

            > このプレビューは、プルリクエストがマージまたはクローズされると自動的に削除されます。`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
